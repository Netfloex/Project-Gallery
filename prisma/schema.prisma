// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// A user, who has a student number, name, password and role. Can upload projects and vote on them.
model User {
  studentNumber  String          @id
  createdAt      DateTime        @default(now())
  password       String
  name           String?
  profilePicture ProfilePicture?
  role           Role            @default(USER)

  projects              Project[]
  votes                 Vote[]
  profileUpdateRequests ProfileUpdateRequest?
}

/// The role for a user, defines their capabilities
enum Role {
  USER
  CURATOR
}

model ProfilePicture {
  id Int @id @default(autoincrement())

  owner              User   @relation(fields: [ownerStudentNumber], references: [studentNumber])
  ownerStudentNumber String @unique

  data Bytes
}

model ProfileUpdateRequest {
  createdAt DateTime @default(now())

  newName        String?
  profilePicture Bytes?

  requester              User   @relation(fields: [requesterStudentNumber], references: [studentNumber])
  requesterStudentNumber String @id
}

/// A vote that can be cast on a project by a user
model Vote {
  createdAt DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  user              User   @relation(fields: [userStudentNumber], references: [studentNumber])
  userStudentNumber String

  @@id([userStudentNumber, projectId])
}

/// A project that is created by an uploader (user), has a name & description, can be approved by a curator, can be voted on
model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name        String
  description String
  approved    Boolean  @default(false)

  votes       Vote[]
  publicVotes Int    @default(0)

  files File[]

  uploader              User   @relation(fields: [uploaderStudentNumber], references: [studentNumber])
  uploaderStudentNumber String
}

// A file uploaded that contains user provided code. Has a name and is related to a project.
model File {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  contents  String

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}
