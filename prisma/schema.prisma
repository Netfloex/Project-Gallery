// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// A user, who has a student number, name, password and role. Can upload projects and vote on them.
model User {
  id             String          @id @default(nanoid(8))
  studentNumber  String          @unique
  createdAt      DateTime        @default(now())
  password       String
  name           String?
  profilePicture ProfilePicture?
  role           Role            @default(USER)

  projects              Project[]
  votes                 Vote[]
  profileUpdateRequests ProfileUpdateRequest?
  projectEditRequest    ProjectEditRequest[]
}

/// The role for a user, defines their capabilities
enum Role {
  USER
  CURATOR
}

model ProfilePicture {
  id String @id @default(nanoid(8))

  owner                User?                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId              String?               @unique
  profileUpdateRequest ProfileUpdateRequest?

  data Bytes
}

model ProfileUpdateRequest {
  createdAt DateTime @default(now())

  newName          String?
  profilePicture   ProfilePicture? @relation(fields: [profilePictureId], references: [id])
  profilePictureId String?         @unique

  requester   User   @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId String @id
}

/// A vote that can be cast on a project by a user
model Vote {
  createdAt DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  user    User   @relation(fields: [voterId], references: [id], onDelete: Cascade)
  voterId String

  @@id([voterId, projectId])
}

model ProjectEditRequest {
  createdAt DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @unique

  user        User   @relation(fields: [requesterId], references: [id])
  requesterId String

  name        String?
  description String?
  files       String[]

  @@id([requesterId, projectId])
}

/// A project that is created by an uploader (user), has a name & description, can be approved by a curator, can be voted on
model Project {
  id          String   @id @default(nanoid(8))
  createdAt   DateTime @default(now())
  name        String
  description String
  approved    Boolean  @default(false)

  votes       Vote[]
  editRequest ProjectEditRequest?

  files File[]

  uploader   User   @relation(fields: [uploaderId], references: [id])
  uploaderId String
}

// A file uploaded that contains user provided code. Has a name and is related to a project.
model File {
  id        String   @id @default(nanoid(8))
  createdAt DateTime @default(now())
  name      String
  contents  String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}
